{"version":3,"sources":["components/messageBox.jsx","components/startButton.jsx","components/gameBoard.jsx","components/resultsDisplay.jsx","App.js","index.js","assets/ready2count.m4a"],"names":["MessageBox","message","Fragment","style","height","className","StartButton","onStartButtonClick","gameOn","gameOver","secondsCountingStarted","clockStop","resetGame","onClick","disabled","GameBoard","time","addTimerClasses","ResultsDisplay","counter","marginBottom","marginTop","length","countdownText","audio","Audio","readySound","App","state","startTime","updatedTime","instructionText","startButtonClicked","play","setState","handleCountdownText","setTimeout","shift","clockStart","tick","difference","Date","getTime","toFixed","intervalID","setInterval","clearInterval","base","setInstructions","setInstructionsClasses","document","title","this","Component","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cb4ff495.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MessageBox = ({ message }) => {\n  return (\n    <React.Fragment>\n      <div style={{ height: 100 }} className=\"row justify-content-center\">\n        <div className=\"gameMessage\">{message}</div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default MessageBox;\n","import React from \"react\";\n\nconst StartButton = ({\n  onStartButtonClick,\n  gameOn,\n  gameOver,\n  secondsCountingStarted,\n  clockStop,\n  resetGame,\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"row startContainer justify-content-center\">\n        {!gameOn && !gameOver && (\n          <button\n            className=\"btn btn-primary mt-3 mb-3\"\n            onClick={() => {\n              onStartButtonClick();\n            }}\n            disabled={gameOn ? \"disabled\" : \"\"}\n          >\n            START\n          </button>\n        )}\n      </div>\n      <div className=\"row justify-content-center\">\n        {gameOn && !gameOver && (\n          <button\n            className=\"btn btn-primary mt-3 mb-3\"\n            onClick={() => clockStop()}\n            disabled={secondsCountingStarted ? \"\" : \"disabled\"}\n          >\n            STOP\n          </button>\n        )}\n      </div>\n      <div className=\"row justify-content-center\">\n        {gameOver ? (\n          <button\n            className=\"btn btn-primary mt-3 mb-3\"\n            onClick={() => resetGame()}\n          >\n            RESET\n          </button>\n        ) : null}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default StartButton;\n","import React from \"react\";\n\nconst GameBoard = ({ time, addTimerClasses }) => {\n  return (\n    <React.Fragment>\n      <div className={addTimerClasses()}>{time}</div>\n    </React.Fragment>\n  );\n};\n\nexport default GameBoard;\n","import React from \"react\";\n\nconst ResultsDisplay = ({ secondsCountingStarted, time, counter, gameOn }) => {\n  return (\n    <React.Fragment>\n      <div\n        style={{ marginBottom: 20, marginTop: 10 }}\n        className=\"row justify-content-center\"\n      >\n        {!secondsCountingStarted && time >= 9.5 && time <= 10.5 && (\n          <div className=\"messageSuccess\">Excellent!</div>\n        )}\n        {counter.length === 1 &&\n          gameOn &&\n          !secondsCountingStarted &&\n          time < 9.5 && <div className=\"messageFailure\">Too Quick</div>}\n        {!secondsCountingStarted && time > 10.5 && (\n          <div className=\"messageFailure\">Too Slow</div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ResultsDisplay;\n","import React, { Component } from \"react\";\nimport MessageBox from \"./components/messageBox\";\nimport StartButton from \"./components/startButton\";\nimport \"./App.css\";\nimport GameBoard from \"./components/gameBoard\";\nimport ResultsDisplay from \"./components/resultsDisplay\";\nimport readySound from \"./assets/ready2count.m4a\";\n\n// component interface: inputs and events\nconst countdownText = [\"\", \"Ready\", \"Ready\", \"3\", \"2\", \"1\", \"Go!\"];\nconst audio = new Audio(readySound);\n\n// if (navigator.userAgent.match(\"Macintosh\")) console.log(\"yes\");\n\nclass App extends Component {\n  state = {\n    counter: countdownText,\n    gameOn: false,\n    gameOver: false,\n    secondsCountingStarted: false,\n    time: 0,\n    startTime: 0,\n    updatedTime: 0,\n    instructionText: [\"press START\", \"press STOP after 10 seconds\"],\n  };\n\n  startButtonClicked = () => {\n    audio.play();\n    this.setState({ gameOn: true });\n    this.handleCountdownText();\n  };\n\n  handleCountdownText = () => {\n    const counter = [...this.state.counter];\n\n    if (counter.length > 1) {\n      setTimeout(() => {\n        counter.shift();\n        this.setState({ counter });\n        this.handleCountdownText();\n      }, 1000);\n    } else {\n      this.clockStart();\n      this.setState({ secondsCountingStarted: true });\n    }\n  };\n\n  tick = () => {\n    let updatedTime = new Date().getTime();\n    let difference = updatedTime - this.state.startTime;\n\n    this.setState({\n      time: ((difference % (1000 * 60)) / 1000).toFixed(2),\n    });\n  };\n\n  clockStart = () => {\n    this.setState({ startTime: new Date().getTime() });\n    this.intervalID = setInterval(() => this.tick(), 10);\n  };\n\n  clockStop = () => {\n    clearInterval(this.intervalID);\n    this.setState({ secondsCountingStarted: false, gameOver: true });\n  };\n\n  addTimerClasses = () => {\n    let base = \"row justify-content-center gameCounter \";\n    if (!this.state.gameOn && !this.state.secondsCountingStarted) return base;\n    if (this.state.gameOn && !this.state.secondsCountingStarted)\n      return base + \"unhidden\";\n    if (this.state.secondsCountingStarted && this.state.gameOn)\n      return base + \"fade-out\";\n  };\n\n  resetGame = () => {\n    this.setState({\n      counter: countdownText,\n      gameOn: false,\n      gameOver: false,\n      secondsCountingStarted: false,\n      time: 0,\n      startTime: 0,\n      updatedTime: 0,\n    });\n  };\n\n  setInstructions = () => {\n    return !this.state.gameOn\n      ? this.state.instructionText[0]\n      : this.state.instructionText[1];\n  };\n\n  setInstructionsClasses = () => {\n    let classes = \"row justify-content-center \";\n    return (classes += !this.state.gameOn ? \"blinking\" : \"\");\n  };\n\n  componentDidMount() {\n    document.title = \"Seconds Counter Game\";\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"></header>\n        <div className=\"container\">\n          <h1 className=\"row justify-content-center\">10 Seconds</h1>\n          <h4 className=\"row justify-content-center\">the game</h4>\n          <h6 className={this.setInstructionsClasses()}>\n            {this.setInstructions()}\n          </h6>\n          <MessageBox message={this.state.counter[0]} />\n          <StartButton\n            onStartButtonClick={this.startButtonClicked}\n            gameOn={this.state.gameOn}\n            resetGame={this.resetGame}\n            gameOver={this.state.gameOver}\n            secondsCountingStarted={this.state.secondsCountingStarted}\n            clockStop={this.clockStop}\n          />\n          <GameBoard\n            time={this.state.time}\n            addTimerClasses={this.addTimerClasses}\n          />\n          <ResultsDisplay\n            secondsCountingStarted={this.state.secondsCountingStarted}\n            time={this.state.time}\n            counter={this.state.counter}\n            gameOn={this.state.gameOn}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/ready2count.05013ceb.m4a\";"],"sourceRoot":""}